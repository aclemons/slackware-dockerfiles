---
name: Slackware 15.0 Full Docker Image

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - full/15.0/**/*
      - scripts/install_all.sh

concurrency:
  group: docker-full-15.0-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: false

env:
  REGISTRY_IMAGE: aclemons/slackware
  # renovate: datasource=docker depName=nginx versioning=docker
  NGINX_IMAGE: 1.29.0@sha256:84ec966e61a8c7846f509da7eb081c55c1d56817448728924a87ab32f12a72fb
  # renovate: datasource=docker depName=tonistiigi/binfmt versioning=loose
  BINFMT_IMAGE: qemu-v9.2.0@sha256:ea2f0dd74e74f101df59f9a6b31d0960994060c7982a921cbceecee0f1841125

jobs:
  build-stable:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v7
    steps:
      - name: Maximise disc space
        run: |
          df -h
          printf '\n'
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          printf '\n'
          df -h
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false
      - name: Set artifact name
        run: |
          if [ "${{ matrix.platform }}" = "linux/386" ] ; then
            printf 'ARTIFACT_NAME=digests-386\n' >> "$GITHUB_ENV"
          elif [ "${{ matrix.platform }}" = "linux/amd64" ] ; then
            printf 'ARTIFACT_NAME=digests-amd64\n' >> "$GITHUB_ENV"
          elif [ "${{ matrix.platform }}" = "linux/arm/v7" ] ; then
            printf 'ARTIFACT_NAME=digests-arm\n' >> "$GITHUB_ENV"
          else
            echo "Unhandled platform ${{ matrix.platform }}"
            exit 1
          fi
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=15.0-full
            type=raw,value=latest-full

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          image: tonistiigi/binfmt:${{ env.BINFMT_IMAGE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          driver-opts: |
            network=host
      - name: Sync mirror
        run: |
          docker run -d --rm -v "$(pwd)/local_mirrors:/usr/share/nginx/html:ro" -p 3000:80 --name mirror nginx:${{ env.NGINX_IMAGE }}

          dir=""
          if [ "${{ matrix.platform }}" = "linux/386" ] ; then
            dir="slackware-15.0"
          elif [ "${{ matrix.platform }}" = "linux/amd64" ] ; then
            dir="slackware64-15.0"
          elif [ "${{ matrix.platform }}" = "linux/arm/v7" ] ; then
            dir="slackwarearm-15.0"
          else
            echo "Unhandled platform ${{ matrix.platform }}"
            exit 1
          fi

          # check that the mirror is working
          ./scripts/sync_local_mirror.sh "$dir"
          curl -s -f "http://localhost:3000/$dir/ChangeLog.txt" -o /dev/null
          curl --head "http://localhost:3000/$dir/ChangeLog.txt"
      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: full/15.0/Dockerfile
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          network: host
          build-args: |
            mirror_base=http://localhost:3000
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-stable:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    needs:
      - build-stable
    steps:
      - name: Download digests
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: digests-*
          path: /tmp/digests
          merge-multiple: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=15.0-full
            type=raw,value=latest-full
      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # shellcheck disable=SC2046
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
