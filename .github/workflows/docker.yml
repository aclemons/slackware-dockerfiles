---
name: Slackware Docker Images

"on":
  schedule:
    - cron: '0 3 * * *'
  push:
    branches:
      - 'master'

concurrency:
  group: docker-master

env:
  ALPINE_IMAGE: alpine:3.15.9@sha256:3362f865019db5f14ac5154cb0db2c3741ad1cce0416045be422ad4de441b081
  ARMEDSLACK_VERSIONS: '["12.2","13.1","13.37"]'
  SLACKWAREARM_VERSIONS: '["14.0","14.1","14.2","15.0"]'
  SLACKWAREAARCH64_VERSIONS: '["current"]'
  PRE_SLACKWARE64_VERSIONS: '["8.1","9.0","9.1","10.0","10.1","10.2","11.0","12.0","12.1","12.2"]'
  LATEST_VERSION: '15.0'

jobs:
  docker:
    strategy:
      matrix:
        # version: ['8.1', '9.0', '9.1', '10.0', '10.1', '10.2', '11.0']
        version: ['12.0', '12.1', '12.2', '13.0', '13.1', '13.37', '14.0', '14.1', '14.2', '15.0', 'current']
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Prep downloads
        run: |
          mkdir -p changelogs

      - name: Fetch slackware ChangeLog
        run: |
          curl -s -f -o changelogs/ChangeLog.txt.386 https://slackware.osuosl.org/slackware-${{ matrix.version }}/ChangeLog.txt

      - name: Fetch slackware64 ChangeLog
        if: false == contains(fromJson(env.PRE_SLACKWARE64_VERSIONS), matrix.version)
        run: |
          curl -s -f -o changelogs/ChangeLog.txt.amd64 https://slackware.osuosl.org/slackware64-${{ matrix.version }}/ChangeLog.txt

      - name: Fetch armedslack ChangeLog
        if: contains(fromJson(env.ARMEDSLACK_VERSIONS), matrix.version)
        run: |
          curl -s -f -o changelogs/ChangeLog.txt.arm https://slackware.uk/slackwarearm/armedslack-${{ matrix.version }}/ChangeLog.txt

      - name: Fetch slackwarearm ChangeLog
        if: contains(fromJson(env.SLACKWAREARM_VERSIONS), matrix.version)
        run: |
          curl -s -f -o changelogs/ChangeLog.txt.arm https://slackware.uk/slackwarearm/slackwarearm-${{ matrix.version }}/ChangeLog.txt

      - name: Fetch slackwareaarch64 ChangeLog
        if: contains(fromJson(env.SLACKWAREAARCH64_VERSIONS), matrix.version)
        run: |
          curl -s -f -o changelogs/ChangeLog.txt.arm https://slackware.uk/slackwarearm/slackwareaarch64-${{ matrix.version }}/ChangeLog.txt

      - name: Cache Base Tarballs
        id: cache-base-tarballs
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          path: base_tarballs/
          key: ${{ runner.os }}-base-tarballs-${{ matrix.version }}-${{ hashFiles('**/changelogs/ChangeLog*', '**/scripts/build_base_image.sh') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@ecf95283f03858871ff00b787d79c419715afc34 # v2.7.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Login to DockerHub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build slackware tarball
        if: steps.cache-base-tarballs.outputs.cache-hit != 'true'
        run: |
          docker run --cap-add SYS_ADMIN --security-opt apparmor:unconfined --rm \
            -e RELEASENAME="slackware" -e ARCH="i586" -e VERSION=${{ matrix.version }} -e CHOWN_TO="$(id -u):$(id -g)" \
            -v "$(pwd):/data" -v "$(pwd)/scripts:/scripts" ${{ env.ALPINE_IMAGE }} \
            sh /scripts/build_base_image.sh

          cp slackware-${{ matrix.version }}.tar base_tarballs/

      - name: Build slackware64 tarball
        if: steps.cache-base-tarballs.outputs.cache-hit != 'true' && false == contains(fromJson(env.PRE_SLACKWARE64_VERSIONS), matrix.version)
        run: |
          docker run --cap-add SYS_ADMIN --security-opt apparmor:unconfined --rm \
            -e RELEASENAME="slackware64" -e ARCH="x86_64" -e VERSION=${{ matrix.version }} -e CHOWN_TO="$(id -u):$(id -g)" \
            -v "$(pwd):/data" -v "$(pwd)/scripts:/scripts" ${{ env.ALPINE_IMAGE }} \
            sh /scripts/build_base_image.sh

          cp slackware64-${{ matrix.version }}.tar base_tarballs/

      - name: Build armedslack tarball
        if: steps.cache-base-tarballs.outputs.cache-hit != 'true' && contains(fromJson(env.ARMEDSLACK_VERSIONS), matrix.version)
        run: |
          docker run --cap-add SYS_ADMIN --security-opt apparmor:unconfined --rm \
            -e RELEASENAME="armedslack" -e ARCH="arm" -e VERSION=${{ matrix.version }} -e CHOWN_TO="$(id -u):$(id -g)" \
            -v "$(pwd):/data" -v "$(pwd)/scripts:/scripts" ${{ env.ALPINE_IMAGE }} \
            sh /scripts/build_base_image.sh

          mv armedslack-${{ matrix.version }}.tar slackwarearm-${{ matrix.version }}.tar
          cp slackwarearm-${{ matrix.version }}.tar base_tarballs/

      - name: Build slackwarearm tarball
        if: steps.cache-base-tarballs.outputs.cache-hit != 'true' && contains(fromJson(env.SLACKWAREARM_VERSIONS), matrix.version)
        run: |
          docker run --cap-add SYS_ADMIN --security-opt apparmor:unconfined --rm \
            -e RELEASENAME="slackwarearm" -e ARCH="arm" -e VERSION=${{ matrix.version }} -e CHOWN_TO="$(id -u):$(id -g)" \
            -v "$(pwd):/data" -v "$(pwd)/scripts:/scripts" ${{ env.ALPINE_IMAGE }} \
            sh /scripts/build_base_image.sh

          cp slackwarearm-${{ matrix.version }}.tar base_tarballs/

      - name: Build slackwareaarch64 tarball
        if: steps.cache-base-tarballs.outputs.cache-hit != 'true' && contains(fromJson(env.SLACKWAREAARCH64_VERSIONS), matrix.version)
        run: |
          docker run --privileged --cap-add SYS_ADMIN --security-opt apparmor:unconfined --rm \
            -e RELEASENAME="slackwareaarch64" -e ARCH="aarch64" -e VERSION=${{ matrix.version }} -e CHOWN_TO="$(id -u):$(id -g)" \
            -v "$(pwd):/data" -v "$(pwd)/scripts:/scripts" ${{ env.ALPINE_IMAGE }} \
            sh /scripts/build_base_image.sh

          cp slackwareaarch64-${{ matrix.version }}.tar base_tarballs/

      - name: Restore prerequisites
        if: steps.cache-base-tarballs.outputs.cache-hit == 'true'
        run: |
          cp base_tarballs/*tar .

      - name: Compute docker platforms
        run: |
          if [ "${{ matrix.version }}" = "8.1" ] || [ "${{ matrix.version }}" = "9.0" ] ||[ "${{ matrix.version }}" = "9.1" ] || [ "${{ matrix.version }}" = "10.0" ] || [ "${{ matrix.version }}" = "10.1" ] || [ "${{ matrix.version }}" = "10.2" ] || [ "${{ matrix.version }}" = "11.0" ] || [ "${{ matrix.version }}" = "12.0" ] || [ "${{ matrix.version }}" = "12.1" ] ; then
            printf 'docker_platforms=%s\n' "linux/386" >> $GITHUB_ENV
          elif [ "${{ matrix.version }}" = "12.2" ] ; then
            printf 'docker_platforms=%s\n' "linux/386,linux/arm/v4" >> $GITHUB_ENV
          elif [ "${{ matrix.version }}" = "13.0" ] ; then
            printf 'docker_platforms=%s\n' "linux/386,linux/amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.version }}" = "13.1" ] || [ "${{ matrix.version }}" = "13.37" ] ; then
            printf 'docker_platforms=%s\n' "linux/386,linux/amd64,linux/arm/v4" >> $GITHUB_ENV
          elif [ "${{ matrix.version }}" = "14.0" ] || [ "${{ matrix.version }}" = "14.1" ] || [ "${{ matrix.version }}" = "14.2" ] ; then
            printf 'docker_platforms=%s\n' "linux/386,linux/amd64,linux/arm/v5" >> $GITHUB_ENV
          elif [ "${{ matrix.version }}" = "15.0" ] ; then
            printf 'docker_platforms=%s\n' "linux/386,linux/amd64,linux/arm/v7" >> $GITHUB_ENV
          else
            printf 'docker_platforms=%s\n' "linux/386,linux/amd64,linux/arm64/v8" >> $GITHUB_ENV
          fi

      - name: Set latest tags
        if: matrix.version == env.LATEST_VERSION
        run: |
          printf "GITHUB_LATEST_TAG=%s\n" "ghcr.io/${{ github.repository_owner }}/slackware:latest" >> $GITHUB_ENV
          printf "DOCKERHUB_LATEST_TAG=%s\n" "${{ github.repository_owner }}/slackware:latest" >> $GITHUB_ENV

      - name: Build and push
        if: steps.cache-base-tarballs.outputs.cache-hit != 'true'
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4.1.1
        with:
          push: true
          platforms: ${{ env.docker_platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: Dockerfile
          build-args: |
            VERSION=${{ matrix.version }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/slackware:${{ matrix.version }}
            ${{ github.repository_owner }}/slackware:${{ matrix.version }}
            ${{ env.GITHUB_LATEST_TAG }}
            ${{ env.DOCKERHUB_LATEST_TAG }}
